name: OpenFisca-Core

on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  build:
    runs-on: ubuntu-20.04
    env:
      TERM: xterm-256color  # To colorize output of make tasks.

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.12  # Patch version must be specified to avoid any cache confusion, since the cache key depends on the full Python version. If left unspecified, different patch versions could be allocated between jobs, and any such difference would lead to a cache not found error.

      - name: Cache build
        id: restore-build
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}
          restore-keys: | # in case of a cache miss (systematically unless the same commit is built repeatedly), the keys below will be used to restore dependencies from previous builds, and the cache will be stored at the end of the job, making up-to-date dependencies available for all jobs of the workflow; see more at https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action
            build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}
            build-${{ env.pythonLocation }}-

      - name: Build package
        run: make install-deps install-test build

      - name: Cache release
        id: restore-release
        uses: actions/cache@v2
        with:
          path: dist
          key: release-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}

  test-core:
    runs-on: ubuntu-20.04
    needs: [ build ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TERM: xterm-256color  # To colorize output of make tasks.

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.12

      - name: Cache build
        id: restore-build
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}

      - name: Run openfisca-core tests
        run:  make test-core

      - name: Submit coverage to Coveralls
        run: |
          pip install coveralls
          coveralls --service=github

  test-country-template:
    runs-on: ubuntu-20.04
    needs: [ build ]
    env:
      TERM: xterm-256color

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.12

      - name: Cache build
        id: restore-build
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}

      - name: Run Country Template tests
        run: make test-country

  test-extension-template:
    runs-on: ubuntu-20.04
    needs: [ build ]
    env:
      TERM: xterm-256color

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.12

      - name: Cache build
        id: restore-build
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}

      - name: Run Extension Template tests
        run: make test-extension

  check-numpy:
    runs-on: ubuntu-20.04
    needs: [ build ]
    env:
      TERM: xterm-256color

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.12

      - name: Cache build
        id: restore-build
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}

      - name: Check NumPy typing against latest 3 minor versions
        run: for i in {1..3}; do VERSION=$(${GITHUB_WORKSPACE}/.github/get-numpy-version.py prev) && pip install numpy==$VERSION && make check-types; done

  lint-files:
    runs-on: ubuntu-20.04
    needs: [ build ]
    env:
      TERM: xterm-256color

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.12

      - name: Cache build
        id: restore-build
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}

      - name: Run linters
        run: make lint

  check-version:
    runs-on: ubuntu-20.04
    needs: [ test-core, test-country-template, test-extension-template, check-numpy, lint-files ] # Last job to run

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.9

      - name: Check version number has been properly updated
        run: "${GITHUB_WORKSPACE}/.github/is-version-number-acceptable.sh"

  check-for-functional-changes:
    runs-on: ubuntu-20.04
    needs: [ check-version ]
    outputs:
      is_fonctional_change: ${{ steps.functional_changes.outputs.result }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.9
      - id: check-functional-changes
        run: ${GITHUB_WORKSPACE}/.github/has-functional-changes.sh
        continue-on-error: true
      - id: functional_changes
        run: echo "result=${{ steps.check-functional-changes.outcome }}"  >> $GITHUB_OUTPUT


  deploy:
    runs-on: ubuntu-20.04
    needs: [ check-for-functional-changes ]
    if: |
      github.ref == 'refs/heads/master' &&
      needs.check-for-functional-changes.outputs.is_fonctional_change == 'success'
    env:
      PYPI_USERNAME: openfisca-bot
      PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      CIRCLE_TOKEN: ${{ secrets.CIRCLECI_V1_OPENFISCADOC_TOKEN }} # Personal API token created in CircleCI to grant full read and write permissions

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.7.12

      - name: Cache build
        id: restore-build
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}

      - name: Cache release
        id: restore-release
        uses: actions/cache@v2
        with:
          path: dist
          key: release-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}

      - name: Upload a Python package to PyPi
        run: twine upload dist/* --username $PYPI_USERNAME --password $PYPI_PASSWORD

      - name: Publish a git tag
        run: "${GITHUB_WORKSPACE}/.github/publish-git-tag.sh"

      - name: Update doc
        run: |
          curl -X POST --header "Content-Type: application/json" -d '{"branch":"master"}' https://circleci.com/api/v1.1/project/github/openfisca/openfisca-doc/build?circle-token=${{ secrets.CIRCLECI_V1_OPENFISCADOC_TOKEN }}


  build-conda:
    runs-on: ubuntu-20.04
    needs: [ check-version ]
    # Do not build on master, the artifact will be used
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.7.9"
          # Add conda-forge for OpenFisca-Core
          channels: conda-forge
          activate-environment: true
      - uses: actions/checkout@v3
      - name: Update meta.yaml
        run: |
          python3 -m pip install requests argparse
          python3 .github/get_pypi_info.py -p OpenFisca-Core
      - name: Get version
        run: echo "PACKAGE_VERSION=$(python3 ./setup.py --version)" >> $GITHUB_ENV
      - name: Conda Config
        run: |
          conda install conda-build anaconda-client
          conda info
      - name: Build Conda package
        run: conda build --croot /tmp/conda .conda
      - name: Upload Conda build
        uses: actions/upload-artifact@v3
        with:
          name: conda-build-${{ env.PACKAGE_VERSION }}-${{ github.sha }}
          path: /tmp/conda

  test-on-windows:
    runs-on: "windows-latest"
    needs: [ build-conda ]

    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.9.9"
          channels: conda-forge
          activate-environment: true

      - uses: actions/checkout@v3
      - name: Download conda build
        uses: actions/download-artifact@v3
        with:
          name: conda-build-${{ env.PACKAGE_VERSION }}-${{ github.sha }}
          path: conda-build-tmp
      - name: Install with conda
        run: |
          conda install -c ./conda-build-tmp/noarch/openfisca-core-dev-${{ env.PACKAGE_VERSION }}-py_0.tar.bz2  openfisca-core-dev
      - name: Test openfisca
        run: openfisca --help

  publish-to-conda:
    runs-on: "ubuntu-20.04"
    needs: [ deploy ]
    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.7.9
          channels: conda-forge
          activate-environment: true
      - name: Get source code
        uses: actions/checkout@v3
      - name: Get version
        run: echo "PACKAGE_VERSION=$(python3 ./setup.py --version)" >> $GITHUB_ENV
      # Get the last commit hash on the PR (-2 : before the merge commit)
      - uses: actions/github-script@v6
        id: last_pr_commit
        with:
          script: |
            const commits = ${{ toJSON(github.event.commits) }}
            return commits.at(-2).id;
          result-encoding: string
      # Default Download artifact don't see artifact of other workflow
      # So we use dawidd6/action-download-artifact@v2 to do it.
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow_conclusion: success
          commit: ${{steps.last_pr_commit.outputs.result}}
          name: conda-build-${{ env.PACKAGE_VERSION }}-${{steps.last_pr_commit.outputs.result}}
          path: conda-build-tmp
          if_no_artifact_found: fail
      - name: Conda upload
        # This shell is made necessary by https://github.com/conda-incubator/setup-miniconda/issues/128
        shell: bash -l {0}
        run: |
          conda install anaconda-client
          conda info
          anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u openfisca ./conda-build-tmp/noarch/openfisca-core-*-py_0.tar.bz2

