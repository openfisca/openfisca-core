name: OpenFisca-Core / Deploy

on:
  push:
    branches: [ master ]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, windows-latest]
        numpy: [1.20.3]
        python: [3.8.10, 3.7.9] # Patch version must be specified to avoid any cache confusion, since the cache key depends on the full Python version. If left unspecified, different patch versions could be allocated between jobs, and any such difference would lead to a cache not found error.
        include:
        - os: ubuntu-20.04
          activate_command: source venv/bin/activate
        - os: windows-latest
          activate_command: .\venv\Scripts\activate
    uses: ./.github/workflows/_before.yaml
    with:
        os: ${{ matrix.os }}
        numpy: ${{ matrix.numpy }}
        python: ${{ matrix.python }}
        activate_command: ${{ matrix.activate_command }}

  test:
    needs: [ setup ]
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, windows-latest]
        numpy: [1.20.3]
        python: [3.8.10, 3.7.9] # Patch version must be specified to avoid any cache confusion, since the cache key depends on the full Python version. If left unspecified, different patch versions could be allocated between jobs, and any such difference would lead to a cache not found error.
        include:
        - os: ubuntu-20.04
          activate_command: source venv/bin/activate
        - os: windows-latest
          activate_command: .\venv\Scripts\activate
    uses: ./.github/workflows/_test.yaml
    with:
        os: ${{ matrix.os }}
        numpy: ${{ matrix.numpy }}
        python: ${{ matrix.python }}
        activate_command: ${{ matrix.activate_command }}

  lint:
    needs: [ setup ]
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-20.04, windows-latest]
        numpy: [1.20.3]
        python: [3.8.10, 3.7.9] # Patch version must be specified to avoid any cache confusion, since the cache key depends on the full Python version. If left unspecified, different patch versions could be allocated between jobs, and any such difference would lead to a cache not found error.
        include:
        - os: ubuntu-20.04
          activate_command: source venv/bin/activate
        - os: windows-latest
          activate_command: .\venv\Scripts\activate
    uses: ./.github/workflows/_lint.yaml
    with:
        os: ${{ matrix.os }}
        numpy: ${{ matrix.numpy }}
        python: ${{ matrix.python }}
        activate_command: ${{ matrix.activate_command }}


  # The idea behind these dependencies is we want to give feedback to
  # contributors on the version number only after they have passed all tests,
  # so they don't have to do it twice after changes happened to the main branch
  # during the time they took to fix the tests.
  check-version:
    runs-on: ubuntu-20.04
    needs: [ test-core, test-country-template, test-extension-template, lint-files ]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.10 # Patch version must be specified to avoid any cache confusion, since the cache key depends on the full Python version. If left unspecified, different patch versions could be allocated between jobs, and any such difference would lead to a cache not found error.

      - name: Check version number has been properly updated
        run: "${GITHUB_WORKSPACE}/.github/is-version-number-acceptable.sh"

  # GitHub Actions does not have a halt job option, to stop from deploying if no functional changes were found.
  # We build a separate job to substitute the halt option.
  # The `deploy` job is dependent on the output of the `check-for-functional-changes`job.
  check-for-functional-changes:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master' # Only triggered for the `master` branch
    needs: [ check-version ] # Last job to run
    outputs:
      status: ${{ steps.stop-early.outputs.status }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.10 # Patch version must be specified to avoid any cache confusion, since the cache key depends on the full Python version. If left unspecified, different patch versions could be allocated between jobs, and any such difference would lead to a cache not found error.

      - id: stop-early
        run: if "${GITHUB_WORKSPACE}/.github/has-functional-changes.sh" ; then echo "::set-output name=status::success" ; fi # The `check-for-functional-changes` job should always succeed regardless of the `has-functional-changes` script's exit code. Consequently, we do not use that exit code to trigger deploy, but rather a dedicated output variable `status`, to avoid a job failure if the exit code is different from 0. Conversely, if the job fails the entire workflow would be marked as `failed` which is disturbing for contributors.

  deploy:
    runs-on: ubuntu-20.04
    needs: [ check-for-functional-changes ]
    if: needs.check-for-functional-changes.outputs.status == 'success'
    env:
      PYPI_USERNAME: openfisca-bot
      PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      CIRCLE_TOKEN: ${{ secrets.CIRCLECI_V1_OPENFISCADOC_TOKEN }} # Personal API token created in CircleCI to grant full read and write permissions

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.10 # Patch version must be specified to avoid any cache confusion, since the cache key depends on the full Python version. If left unspecified, different patch versions could be allocated between jobs, and any such difference would lead to a cache not found error.

      - name: Cache deps
        uses: actions/cache@v3
        with:
          path: venv
          key: deps-ubuntu-20.04-1.20.3-3.8.10-${{ hashFiles('setup.py') }}

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: venv/**/[oO]pen[fF]isca*
          key: build-ubuntu-20.04-1.20.3-3.8.10-${{ hashFiles('setup.py') }}-${{ github.sha }}

      - name: Upload a Python package to PyPi
        run: |
          source venv/bin/activate
          make publish

      - name: Update doc
        run: |
          curl -X POST --header "Content-Type: application/json" -d '{"branch":"master"}' https://circleci.com/api/v1.1/project/github/openfisca/openfisca-doc/build?circle-token=${{ secrets.CIRCLECI_V1_OPENFISCADOC_TOKEN }}

  publish-to-conda:
    runs-on: ubuntu-20.04
    needs: [ deploy ]

    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.7.9 # Patch version must be specified to avoid any cache confusion, since the cache key depends on the full Python version. If left unspecified, different patch versions could be allocated between jobs, and any such difference would lead to a cache not found error.
          channels: conda-forge
          activate-environment: true

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all the tags

      - name: Update meta.yaml
        run: |
          python3 -m pip install requests argparse
          # Sleep to allow PyPi to update its API
          sleep 60
          python3 .github/get_pypi_info.py -p OpenFisca-Core

      - name: Conda Config
        run: |
          conda install conda-build anaconda-client
          conda info
          conda config --set anaconda_upload yes

      - name: Conda build
        run: conda build -c conda-forge --token ${{ secrets.ANACONDA_TOKEN }} --user openfisca .conda
