import datetime

import pytest

from openfisca_core import periods
from openfisca_core.periods import DateUnit, Instant, Period, PeriodError


@pytest.mark.parametrize(
    ("arg", "expected"),
    [
        ("eternity", Period((DateUnit.ETERNITY, Instant((-1, -1, -1)), -1))),
        ("ETERNITY", Period((DateUnit.ETERNITY, Instant((-1, -1, -1)), -1))),
        (
            DateUnit.ETERNITY,
            Period((DateUnit.ETERNITY, Instant((-1, -1, -1)), -1)),
        ),
        (datetime.date(1, 1, 1), Period((DateUnit.DAY, Instant((1, 1, 1)), 1))),
        (Instant((1, 1, 1)), Period((DateUnit.DAY, Instant((1, 1, 1)), 1))),
        (
            Period((DateUnit.DAY, Instant((1, 1, 1)), 365)),
            Period((DateUnit.DAY, Instant((1, 1, 1)), 365)),
        ),
        (-1, Period((DateUnit.YEAR, Instant((-1, 1, 1)), 1))),
        (0, Period((DateUnit.YEAR, Instant((0, 1, 1)), 1))),
        (1, Period((DateUnit.YEAR, Instant((1, 1, 1)), 1))),
        (999, Period((DateUnit.YEAR, Instant((999, 1, 1)), 1))),
        (1000, Period((DateUnit.YEAR, Instant((1000, 1, 1)), 1))),
        ("1001", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 1))),
        ("1001-01", Period((DateUnit.MONTH, Instant((1001, 1, 1)), 1))),
        ("1001-01-01", Period((DateUnit.DAY, Instant((1001, 1, 1)), 1))),
        ("1004-02-29", Period((DateUnit.DAY, Instant((1004, 2, 29)), 1))),
        ("1001-W01", Period((DateUnit.WEEK, Instant((1000, 12, 29)), 1))),
        ("1001-W01-1", Period((DateUnit.WEEKDAY, Instant((1000, 12, 29)), 1))),
        ("year:1001", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 1))),
        ("year:1001-01", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 1))),
        ("year:1001-01-01", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 1))),
        ("year:1001-W01", Period((DateUnit.YEAR, Instant((1000, 12, 29)), 1))),
        ("year:1001-W01-1", Period((DateUnit.YEAR, Instant((1000, 12, 29)), 1))),
        ("year:1001:1", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 1))),
        ("year:1001-01:1", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 1))),
        ("year:1001-01-01:1", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 1))),
        ("year:1001-W01:1", Period((DateUnit.YEAR, Instant((1000, 12, 29)), 1))),
        ("year:1001-W01-1:1", Period((DateUnit.YEAR, Instant((1000, 12, 29)), 1))),
        ("year:1001:3", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 3))),
        ("year:1001-01:3", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 3))),
        ("year:1001-01-01:3", Period((DateUnit.YEAR, Instant((1001, 1, 1)), 3))),
        ("year:1001-W01:3", Period((DateUnit.YEAR, Instant((1000, 12, 29)), 3))),
        ("year:1001-W01-1:3", Period((DateUnit.YEAR, Instant((1000, 12, 29)), 3))),
        ("month:1001-01", Period((DateUnit.MONTH, Instant((1001, 1, 1)), 1))),
        ("month:1001-01-01", Period((DateUnit.MONTH, Instant((1001, 1, 1)), 1))),
        ("week:1001-W01", Period((DateUnit.WEEK, Instant((1000, 12, 29)), 1))),
        ("week:1001-W01-1", Period((DateUnit.WEEK, Instant((1000, 12, 29)), 1))),
        ("month:1001-01:1", Period((DateUnit.MONTH, Instant((1001, 1, 1)), 1))),
        ("month:1001-01:3", Period((DateUnit.MONTH, Instant((1001, 1, 1)), 3))),
        ("month:1001-01-01:3", Period((DateUnit.MONTH, Instant((1001, 1, 1)), 3))),
        ("week:1001-W01:1", Period((DateUnit.WEEK, Instant((1000, 12, 29)), 1))),
        ("week:1001-W01:3", Period((DateUnit.WEEK, Instant((1000, 12, 29)), 3))),
        ("week:1001-W01-1:3", Period((DateUnit.WEEK, Instant((1000, 12, 29)), 3))),
        ("day:1001-01-01", Period((DateUnit.DAY, Instant((1001, 1, 1)), 1))),
        ("day:1001-01-01:3", Period((DateUnit.DAY, Instant((1001, 1, 1)), 3))),
        ("weekday:1001-W01-1", Period((DateUnit.WEEKDAY, Instant((1000, 12, 29)), 1))),
        (
            "weekday:1001-W01-1:3",
            Period((DateUnit.WEEKDAY, Instant((1000, 12, 29)), 3)),
        ),
    ],
)
def test_period(arg, expected) -> None:
    assert periods.period(arg) == expected


@pytest.mark.parametrize(
    ("arg", "error"),
    [
        (None, PeriodError),
        (DateUnit.YEAR, PeriodError),
        ("1", PeriodError),
        ("999", PeriodError),
        ("1000-0", PeriodError),
        ("1000-13", PeriodError),
        ("1000-W0", PeriodError),
        ("1000-W54", PeriodError),
        ("1000-0-0", PeriodError),
        ("1000-1-0", PeriodError),
        ("1000-2-31", PeriodError),
        ("1000-W0-0", PeriodError),
        ("1000-W1-0", PeriodError),
        ("1000-W1-8", PeriodError),
        ("a", PeriodError),
        ("year", PeriodError),
        ("1:1000", PeriodError),
        ("a:1000", PeriodError),
        ("month:1000", PeriodError),
        ("week:1000", PeriodError),
        ("day:1000-01", PeriodError),
        ("weekday:1000-W1", PeriodError),
        ("1000:a", PeriodError),
        ("1000:1", PeriodError),
        ("1000-01:1", PeriodError),
        ("1000-01-01:1", PeriodError),
        ("1000-W1:1", PeriodError),
        ("1000-W1-1:1", PeriodError),
        ("month:1000:1", PeriodError),
        ("week:1000:1", PeriodError),
        ("day:1000:1", PeriodError),
        ("day:1000-01:1", PeriodError),
        ("weekday:1000:1", PeriodError),
        ("weekday:1000-W1:1", PeriodError),
        ((), PeriodError),
        ({}, PeriodError),
        ("", PeriodError),
        ((None,), PeriodError),
        ((None, None), PeriodError),
        ((None, None, None), PeriodError),
        ((None, None, None, None), PeriodError),
        ((Instant((1, 1, 1)),), PeriodError),
        ((Period((DateUnit.DAY, Instant((1, 1, 1)), 365)),), PeriodError),
        ((1,), PeriodError),
        ((1, 1), PeriodError),
        ((1, 1, 1), PeriodError),
        ((-1,), PeriodError),
        ((-1, -1), PeriodError),
        ((-1, -1, -1), PeriodError),
        (("-1",), PeriodError),
        (("-1", "-1"), PeriodError),
        (("-1", "-1", "-1"), PeriodError),
        (("1-1",), PeriodError),
        (("1-1-1",), PeriodError),
    ],
)
def test_period_with_an_invalid_argument(arg, error) -> None:
    with pytest.raises(error):
        periods.period(arg)
